#import Schema/*.gql

scalar DateTimeTz @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeTz")

type Score {
    id: Int!
}

interface BestScore {
    id: Int! @rename(attribute: "best_id")
    beatmap: Beatmap! @belongsTo
    user: User! @belongsTo
}

type BestOsuScore implements BestScore @model(class: "App\\Models\\Score\\Best\\Osu") {
    id: Int! @rename(attribute: "best_id")
    beatmap: Beatmap! @belongsTo
    user: User! @belongsTo

    count100: Int!
    count300: Int!
    count50: Int!
    countgeki: Int!
    countkatu: Int!
    countmiss: Int!
    created_at: DateTimeTz! @rename(attribute: "date")
    date: DateTimeTz!
    mods: Int! @rename(attribute: "enabled_mods")
    max_combo: Int! @rename(attribute: "maxcombo")
    passed: Boolean! @rename(attribute: "pass")
    perfect: Boolean!
    pp: Float
    replay: Boolean!
    score: Int!
}

type BestManiaScore implements BestScore @model(class: "App\\Models\\Score\\Best\\Mania") {
    id: Int! @rename(attribute: "best_id")
    beatmap: Beatmap! @belongsTo
    user: User! @belongsTo

    count100: Int!
    count300: Int!
    count50: Int!
    countgeki: Int!
    countkatu: Int!
    countmiss: Int!
    created_at: DateTimeTz! @rename(attribute: "date")
    date: DateTimeTz!
    mods: Int! @rename(attribute: "enabled_mods")
    max_combo: Int! @rename(attribute: "maxcombo")
    passed: Boolean! @rename(attribute: "pass")
    perfect: Boolean!
    pp: Float
    replay: Boolean!
    score: Int!
}

type Beatmap {
    id: Int! @rename(attribute: "beatmap_id")

    beatmapset: Beatmapset! @belongsTo
    user: User! @belongsTo

    # BeatmapCompact
    difficulty_rating: Float! @rename(attribute: "difficultyrating")
    mode: Playmode!
    status: BeatmapStates! @method
    total_length: Int!
    version: String!

    # Beatmap
    accuracy: Float! @rename(attribute: "diff_overall")
    ar: Float! @rename(attribute: "diff_approach")
    bpm: Float!
    convert: Boolean!
    count_normal: Int!
    count_slider: Int!
    count_spinner: Int!
    count_total: Int!
    cs: Float! @rename(attribute: "diff_size")
    deleted_at: DateTimeTz
    drain: Float! @rename(attribute: "diff_drain")
    hit_length: Int!
    is_scoreable: Boolean!
    last_updated: DateTimeTz! @rename(attribute: "last_update")
    mode_int: Int! @rename(attribute: "playmode")
    passcount: Int!
    playcount: Int!
    ranked: Int! @rename(attribute: "approved")

    checksum: String!
    filename: String!
    # TODO: failtimes
    max_combo: Int
        @method(name: "maxCombo")
        @with(relation: "baseMaxCombo")

    "Get a user's score on the beatmap"
    user_score(
        "User ID, self if not specified"
        user: Int,
        mode: String,
        mods: [String]
    ): BestScore

    "Get the beatmap's top scores"
    best_scores(
        mode: Playmode,
        mods: [String] @restrict(requiresSupporter: true),
        type: String @restrict(requiresSupporter: true),
    ): [BestScore!]!
        @paginate(builder: "App\\GraphQL\\Resolvers\\BeatmapResolver@bestScores")
}

type Language {
    id: Int! @rename(attribute: "language_id")
    name: String!
}

type Genre {
    id: Int! @rename(attribute: "genre_id")
    name: String!
}

type Beatmapset {
    artist: String!
    beatmaps: [Beatmap!]! @hasMany
    language: Language! @belongsTo
    genre: Genre! @belongsTo
    id: Int! @rename(attribute: "beatmapset_id")
    title: String!
    user: User! @belongsTo
}

type Changelog {
    id: Int! @rename(attribute: "changelog_id")
    build: String
    category: String!
    checksum: String!
}

type NewsPost {
    id: Int!
    author: String!
}

type Query {
    changelog(
        id: Int @eq(key: "changelog_id"),
        build: String @eq(key: "build"),
        stream: String @eq(key: "stream_id")
    ): Changelog @first

    changelogs: [Changelog!]! @paginate

    news: [NewsPost!]! @paginate

    "Get an osu user"
    user(
        id: Int @eq(key: "user_id")
        username: String @eq
    ): User @first

    "Gets the currently authenticated user"
    me: User
        @restrict(scopes: ["identify"])
        @auth
}

extend type Query @oauth {
    "Get an osu beatmap"
    beatmap(
        id: Int @eq(key: "beatmap_id")
        checksum: String
        filename: String
    ): Beatmap @first

    beatmaps(
        includeIDs: [Int!]! @in(key: "beatmap_id")
    ): [Beatmap!]! @paginate

    beatmapsets(
        includeIDs: [Int!] @in(key: "beatmapset_id")
        orderBy: _ @orderBy(columns: [
            "title",
            "artist"
        ])
    ): [Beatmapset!]! @paginate

    groups: [Group!]! @paginate
}
