type Beatmap {
    id: Int! @rename(attribute: "beatmap_id")

    beatmapset: Beatmapset! @belongsTo
    user: User! @belongsTo

    # BeatmapCompact
    difficulty_rating: Float! @rename(attribute: "difficultyrating")
    mode: Playmode!
    status: BeatmapStates! @method
    total_length: Int!
    version: String!

    # Beatmap
    accuracy: Float! @rename(attribute: "diff_overall")
    ar: Float! @rename(attribute: "diff_approach")
    bpm: Float!
    convert: Boolean! @rename(attribute: "convert")
    count_normal: Int! @rename(attribute: "countNormal")
    count_slider: Int! @rename(attribute: "countSlider")
    count_spinner: Int! @rename(attribute: "countSpinner")
    count_total: Int! @rename(attribute: "countTotal")
    cs: Float! @rename(attribute: "diff_size")
    deleted_at: DateTimeTz
    drain: Float! @rename(attribute: "diff_drain")
    hit_length: Int!
    is_scoreable: Boolean! @method(name: "isScoreable")
    last_updated: DateTimeTz! @rename(attribute: "last_update")
    mode_int: Int! @rename(attribute: "playmode")
    passcount: Int!
    playcount: Int!
    ranked: Int! @rename(attribute: "approved")

    checksum: String!
    filename: String!
    # TODO: failtimes
    max_combo: Int
        @method(name: "maxCombo")
        @with(relation: "baseMaxCombo")

    "Get a user's score on the beatmap"
    user_score(
        "User ID, self if not specified"
        user: Int,
        mode: String,
        mods: [String]
    ): BestScore

    "Get the beatmap's top scores"
    best_scores(
        mode: Playmode,
        mods: [String] @restrict(requiresSupporter: true),
        type: String @restrict(requiresSupporter: true),
    ): [BestScore!]!
        # FIXME: this is N+1
        @paginate(type: SIMPLE, builder: "App\\GraphQL\\Resolvers\\BeatmapResolver@bestScores")
}
